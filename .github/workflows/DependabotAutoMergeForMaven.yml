name: DependabotAutoMergeForMaven

on:
  schedule:
    - cron: '50 4 * * *' # 每天上午4点50执行（Cron表达式）
  workflow_dispatch:   
  pull_request_target:  # 关键修改：响应PR事件
    types: [opened, reopened, synchronize, ready_for_review]

permissions:
  contents: write
  pull-requests: write

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    # 检查PR作者和分支
    if: |
      github.event.pull_request.user.login == 'dependabot[bot]' && github.event.pull_request.base.ref == 'dependabot'
    
    steps:
      # 1. 获取元数据
      - name: Get dependency metadata
        uses: dependabot/fetch-metadata@v1.1.1
        id: metadata
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
      
      # 2. 检查特定依赖
      - name: Check allowed dependency
        id: check-dep
        run: |
          ALLOWED_DEP="com.acanx.meta:os-dependencies"
          echo "DependencyGAV: ${{ steps.metadata.outputs.dependency-names }}"
          DEPS="${{ steps.metadata.outputs.dependency-names }}"
          
          if [[ "$DEPS" != *"$ALLOWED_DEP"* ]]; then
            echo "::error::Dependency【$DEPS】 not found in 【$ALLOWED_DEP】"
            exit 1
          fi
      
      # 3. 检查更新类型
      - name: Check update type
        if: ${{ steps.metadata.outputs.update-type != 'version-update:semver-patch' }}
        run: |
          echo "Skipping non-patch update (${{ steps.metadata.outputs.update-type }})"
          exit 78  # 特殊退出码标记跳过

      # 5. 检查PR状态
      - name: Verify PR status
        id: check-status
        run: |
          if [ "${{ github.event.pull_request.state }}" != "open" ]; then
            echo "::error::PR is not open"
            exit 1
          fi
          
          # 检查是否包含特定标签阻止合并
          if [[ "${{ github.event.pull_request.labels.*.name }}" == *"do-not-merge"* ]]; then
            echo "::warning::PR has do-not-merge label"
            exit 78
          fi

      # 6. 自动合并
      # - name: Auto-merge patch update
      #   if: success() && steps.check-status.outcome == 'success'
      #   uses: actions/github-script@v4
      #   with:
      #     script: |
      #       github.rest.pulls.merge({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         pull_number: ${{ github.event.pull_request.number }},
      #         merge_method: 'rebase'
      #       })
      - name: Auto-merge patch update
        if: success() && steps.check-status.outcome == 'success'
        uses: actions/github-script@v4
        with:
          script: |
            // 使用正确的 API 路径 + 确保引用上下文变量
            github.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,  // 直接使用脚本上下文变量
              merge_method: 'rebase'
            })
          github-token: ${{ secrets.GITHUB_TOKEN }}  
