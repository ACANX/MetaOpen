name: ReleaseFullArtifactsInBatches
permissions:
  contents: read

on:
  workflow_dispatch:

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - name: CheckoutCode
        uses: actions/checkout@v4

      - name: SetupJava
        uses: actions/setup-java@v5
        with:
          java-version: '21' # 或你项目使用的JDK版本
          distribution: 'temurin'
          cache: 'maven'
          # 通常会在 pom.xml 或 settings.xml 中配置 gpg 相关信息

      - name: ImportGPGKey
        uses: crazy-max/ghaction-import-gpg@v3
        with:
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: ConfigureMavenSettingsForSonatype
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml <<EOF
          <settings>
            <servers>
              <server>
                <id>sonatype-nexus-staging</id>
                <username>${{ secrets.OSSRH_USERNAME }}</username>
                <password>${{ secrets.OSSRH_TOKEN }}</password>
              </server>
              <server>
                <id>sonatype-nexus-snapshots</id>
                <username>${{ secrets.OSSRH_USERNAME }}</username>
                <password>${{ secrets.OSSRH_TOKEN }}</password>
              </server>
            </servers>
          </settings>
          EOF
        shell: bash
        
      # - name: ListMavenProjects
      #   run: mvn -B projects:list

      - name: PublishOS-DependenciesToMavenCentral
        run: |
         echo "======================================= 版本发布开始 ==================================================================="
         echo "======================================= 1.本地预先编译一次整个项目 ======================================================"
         pwd                 
         mvn clean install
         echo "======================================= 2.编译 os-dependencies ========================================================"
         cd os-dependencies       # 设置工作目录为 os-dependencies
         pwd
         mvn -B clean deploy
         echo "======================================= 3.编译 meta-open =============================================================="
         cd ../                   # 设置工作目录为 ./
         pwd
         mvn -B clean deploy -pl :meta-open -am
         echo "======================================= 4.编译 meta-model ============================================================="
         cd meta-model           # 设置工作目录为 meta-model
         pwd
         mvn -B clean deploy
         echo "======================================= 5.编译 meta-component ========================================================="
         cd ../
         cd meta-component      # 设置工作目录为 meta-component
         pwd
         mvn -B clean deploy
         echo "======================================= 6.编译 meta-bom ==============================================================="
         cd ../
         cd meta-bom           # 设置工作目录为 meta-bom
         pwd
         mvn -B clean deploy
         echo "======================================= 版本发布完成 ==================================================================="
        env:
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}   # 假设你的 Maven GPG 插件配置或 settings.xml 使用这些变量
          OSSRH_TOKEN: ${{ secrets.OSSRH_TOKEN }}
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}      # 如果 Maven 配置需要明确 Key ID：
          
      # - name: PublishMetaOpenToMavenCentral
      #   # working-directory: / 
      #   run: mvn -B clean deploy -pl :meta-open -am
      #   env:
      #     OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
      #     OSSRH_TOKEN: ${{ secrets.OSSRH_TOKEN }}
      #     GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}

      # - name: PublishMetaModelToMavenCentral
      #   working-directory: meta-model 
      #   run: mvn -B clean deploy
      #   env:
      #     OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
      #     OSSRH_TOKEN: ${{ secrets.OSSRH_TOKEN }}
      #     GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
          
      # - name: PublishMetaComponentToMavenCentral
      #   working-directory: meta-component 
      #   run: mvn -B clean deploy 
      #   env:
      #     OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
      #     OSSRH_TOKEN: ${{ secrets.OSSRH_TOKEN }}
      #     GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}

      # - name: PublishMetaBOMToMavenCentral
      #   working-directory: meta-bom 
      #   run: mvn -B clean deploy
      #   env:
      #     OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
      #     OSSRH_TOKEN: ${{ secrets.OSSRH_TOKEN }}
      #     GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
          
